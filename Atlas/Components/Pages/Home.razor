@page "/{Test:int?}"
@using Atlas.Interfaces
@using Atlas.Models
@using Atlas.Services
@inject HttpClient Http
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Поиск Маршруток</PageTitle>

<div class="container">
    <h1 class="text-center mb-4">Поиск Маршруток</h1>

    <div class="card shadow-sm p-4 mb-4">
        <div class="row">
            <div class="col-md-6 mb-3">
                <label class="form-label">Дата поездки:</label>
                <input type="date" @bind-value="TripDate" class="form-control"/>
            </div>

            <div class="col-md-6 mb-3">
                <label class="form-label">Количество пассажиров:</label>
                <input type="number" @bind="Passengers" min="1" class="form-control"/>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <label class="form-label">Время начала:</label>
                <input type="time" @bind="StartTime" class="form-control"/>
            </div>
            <div class="col-md-6 mb-3">
                <label class="form-label">Время окончания:</label>
                <input type="time" @bind="EndTime" class="form-control"/>
            </div>
        </div>

        <div class="row align-items-end">
            <div class="col-md-5 mb-3">
                <label class="form-label">Откуда:</label>
                <select @bind="FromCity" class="form-control">
                    <option value="c625144">Минск</option>
                    <option value="c626081">Лида</option>
                </select>
            </div>
            <div class="col-md-2 mb-3 text-center">
                <button class="btn btn-switch" @onclick="SwapCities" title="Поменять города местами">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M16 3H21V8" stroke="#3498db" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M21 3L14 10" stroke="#3498db" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M8 21H3V16" stroke="#3498db" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M3 21L10 14" stroke="#3498db" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </button>
            </div>
            <div class="col-md-5 mb-3">
                <label class="form-label">Куда:</label>
                <select @bind="ToCity" class="form-control">
                    <option value="c625144">Минск</option>
                    <option value="c626081">Лида</option>
                </select>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <label class="form-label">Источник данных:</label>
                <select @bind="SelectedSource" class="form-control">
                    <option value="Atlas">Atlas</option>
                    <option value="MinskLida">Minsk-Lida</option>
                </select>
            </div>
            <div class="col-md-6 mb-3">
                <label class="form-label">Интервал обновления (секунды):</label>
                <input type="number" @bind="RefreshInterval" min="10" class="form-control"/>
            </div>
        </div>

        <div class="text-center">
            @if (!IsFetching)
            {
                <button class="btn btn-primary me-2" @onclick="StartFetching">Начать поиск</button>
            }
            @if (IsFetching)
            {
                <button class="btn btn-secondary me-2" @onclick="StopFetching">Остановить поиск</button>
            }
            @if (IsSoundPlaying)
            {
                <button class="btn btn-warning" @onclick="StopSound">Остановить звук</button>
            }
        </div>

        <div class="text-center mt-3">
            @if (SelectedSource == "Atlas")
            {
                <a href="@GetAtlasLink()" target="_blank" class="btn btn-info">Открыть на Atlas</a>
            }
            else
            {
                <a href="@GetMinskLidaAutoFillLink()" target="_blank" class="btn btn-info">Открыть на Minsk-Lida</a>
            }
        </div>
    </div>

    @if (ErrorMessage != null)
    {
        <div class="alert alert-danger">
            @ErrorMessage
        </div>
    }

    @if (Trips.Any())
    {
        <h3 class="mb-3">Найденные маршрутки</h3>
        <div class="card shadow-sm">
            <div class="card-body">
                <table class="table table-hover">
                    <thead>
                    <tr>
                        <th>Отправление</th>
                        <th>Прибытие</th>
                        <th>Автобус</th>
                        <th>Свободные места</th>
                        <th>Цена (BYN)</th>
                        <th>Действие</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var trip in Trips)
                    {
                        <tr>
                            <td>@trip.Departure</td>
                            <td>@trip.Arrival</td>
                            <td>@(trip.Bus != null ? $"{trip.Bus.Mark} {trip.Bus.Model} ({trip.Bus.Color?.Name})" : "Микроавтобус")</td>
                            <td>@trip.FreeSeats</td>
                            <td>@trip.Price</td>
                            <td>
                                @if (SelectedSource == "Atlas")
                                {
                                    <a href="@GetAtlasLink()" target="_blank" class="btn btn-info btn-sm">Перейти к маршруту</a>
                                }
                                else
                                {
                                    <a href="@trip.ReservationUrl" target="_blank" class="btn btn-info btn-sm">Перейти к маршруту</a>
                                }
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else if (!Trips.Any() && IsFetching)
    {
        <div class="alert alert-warning text-center">
            Поиск выполняется... Пока ничего не найдено.
        </div>
    }
    else if (!Trips.Any() && !IsFetching && HasSearched)
    {
        <div class="alert alert-warning text-center">
            Ничего не найдено по заданным фильтрам.
        </div>
    }
</div>

@code {
    [Parameter] public int? Test { get; set; }
    private DateTime TripDate { get; set; } = DateTime.Today;
    private TimeOnly StartTime { get; set; } = TimeOnly.Parse("00:00");
    private TimeOnly EndTime { get; set; } = TimeOnly.Parse("23:59");
    private int Passengers { get; set; } = 1;
    private string FromCity { get; set; } = "c625144"; // Минск
    private string ToCity { get; set; } = "c626081"; // Лида
    private string SelectedSource { get; set; } = "Atlas"; // Источник данных
    private int RefreshInterval { get; set; } = 60; // Default 60 seconds
    private List<Ride> Trips { get; set; } = new();
    private string? ErrorMessage { get; set; }
    private bool IsFetching { get; set; }
    private bool HasNotified { get; set; }
    private bool HasSearched { get; set; }
    private bool IsSoundPlaying { get; set; }
    private CancellationTokenSource? cts;

    private readonly Dictionary<string, string> CityNames = new()
    {
        { "c625144", "Минск" },
        { "c626081", "Лида" }
    };

    private readonly Dictionary<string, int> CityToMinskLidaMapping = new()
    {
        { "c625144", 1 }, // Минск
        { "c626081", 2 }  // Лида
    };

    private void SwapCities()
    {
        var temp = FromCity;
        FromCity = ToCity;
        ToCity = temp;
    }

    private string GetAtlasLink()
    {
        var fromCityName = CityNames[FromCity];
        var toCityName = CityNames[ToCity];
        var formattedDate = TripDate.ToString("yyyy-MM-dd");
        return $"https://atlasbus.by/Маршруты/{fromCityName}/{toCityName}?date={formattedDate}&passengers={Passengers}&from={FromCity}&to={ToCity}";
    }

    private string GetMinskLidaAutoFillLink()
    {
        var fromCityId = CityToMinskLidaMapping[FromCity];
        var toCityId = CityToMinskLidaMapping[ToCity];
        var formattedDate = TripDate.ToString("yyyy-MM-dd");
        return $"https://bilet.minsk-lida.by";
    }

    private IRouteSearcher GetRouteSearcher()
    {
        return SelectedSource switch
        {
            "Atlas" => new AtlasRouteSearcher(Http, CityNames),
            "MinskLida" => new MinskLidaRouteSearcher(Http, CityNames, CityToMinskLidaMapping),
            _ => throw new NotSupportedException("Неизвестный источник данных.")
        };
    }

    private async Task StartFetching()
    {
        if (IsFetching) return;
        IsFetching = true;
        HasNotified = false;
        HasSearched = false;
        cts = new CancellationTokenSource();

        try
        {
            while (!cts.Token.IsCancellationRequested)
            {
                await FetchTrips();
                await Task.Delay(RefreshInterval * 1000, cts.Token);
            }
        }
        catch (TaskCanceledException)
        {
            // Ожидаемое исключение при остановке
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Ошибка при поиске: {ex.Message}";
        }
        finally
        {
            IsFetching = false;
            HasSearched = true;
        }
    }

    private void StopFetching()
    {
        cts?.Cancel();
        IsFetching = false;
        HasNotified = false;
        HasSearched = true;
    }

    private async Task FetchTrips()
    {
        try
        {
            ErrorMessage = null;
            var routeSearcher = GetRouteSearcher();
            var newTrips = await routeSearcher.SearchRoutesAsync(FromCity, ToCity, TripDate, Passengers, StartTime, EndTime);

            // Сортируем поездки по времени отправления
            newTrips = newTrips.OrderBy(t => DateTime.Parse(t.Departure)).ToList();

            // Проверяем, есть ли новые поездки и уведомляли ли уже
            if (newTrips.Any() && !HasNotified)
            {
                await JS.InvokeVoidAsync("playNotificationSound");
                IsSoundPlaying = true;
                HasNotified = true;
            }

            Trips = newTrips;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Ошибка при поиске: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task StopSound()
    {
        await JS.InvokeVoidAsync("stopNotificationSound");
        IsSoundPlaying = false;
    }
}

<style>
    body {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .container {
        max-width: 900px;
        margin: 0 auto;
        padding: 30px 15px;
    }

    h1 {
        color: #2c3e50;
        font-weight: 600;
    }

    .card {
        border: none;
        border-radius: 15px;
        background: #ffffff;
        transition: transform 0.2s;
    }

    .card:hover {
        transform: translateY(-5px);
    }

    .form-label {
        font-weight: 500;
        color: #34495e;
    }

    .form-control {
        border-radius: 8px;
        border: 1px solid #dfe6e9;
        padding: 8px 12px;
        transition: border-color 0.2s;
    }

    .form-control:focus {
        border-color: #3498db;
        box-shadow: 0 0 5px rgba(52, 152, 219, 0.3);
    }

    .btn {
        border-radius: 8px;
        padding: 10px 20px;
        font-weight: 500;
        transition: background-color 0.2s;
    }

    .btn-primary {
        background-color: #3498db;
        border: none;
    }

    .btn-primary:hover {
        background-color: #2980b9;
    }

    .btn-secondary {
        background-color: #7f8c8d;
        border: none;
    }

    .btn-secondary:hover {
        background-color: #6c757d;
    }

    .btn-info {
        background-color: #17a2b8;
        border: none;
    }

    .btn-info:hover {
        background-color: #138496;
    }

    .btn-warning {
        background-color: #ffc107;
        border: none;
        color: #212529;
    }

    .btn-warning:hover {
        background-color: #e0a800;
    }

    .btn-switch {
        background-color: #f8f9fa;
        border: 1px solid #dfe6e9;
        border-radius: 8px;
        padding: 8px;
        transition: background-color 0.2s;
    }

    .btn-switch:hover {
        background-color: #e9ecef;
    }

    .table {
        margin-bottom: 0;
    }

    .table th {
        background-color: #3498db;
        color: white;
        border: none;
    }

    .table td {
        vertical-align: middle;
    }

    .table-hover tbody tr:hover {
        background-color: #f8f9fa;
    }

    .alert-danger {
        border-radius: 8px;
        background-color: #ffebee;
        color: #c0392b;
        border: none;
    }

    .alert-warning {
        border-radius: 8px;
        background-color: #fff3cd;
        color: #856404;
        border: none;
    }
</style>

<script>
    let audio = null;

    window.playNotificationSound = function () {
        audio = new Audio('nasty-doorbell-ringing_gj4l4be_.mp3');
        audio.play().catch(function (error) {
            console.log("Error playing sound: ", error);
        });
    };

    window.stopNotificationSound = function () {
        if (audio) {
            audio.pause();
            audio.currentTime = 0;
            audio = null;
        }
    };
</script>